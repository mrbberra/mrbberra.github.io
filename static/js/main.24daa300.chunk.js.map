{"version":3,"sources":["Section.js","SectionList.js","App.js","serviceWorker.js","index.js"],"names":["Section","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isOpen","_this2","react_default","a","createElement","className","id","onClick","title","children","Component","SectionList","closeSection","section","console","log","expandSection","toggle","openSection","forEach","child","setState","map","src_Section_0","lib","isOpened","App","src_SectionList","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.24daa300.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Section.css';\n\nclass Section extends Component {\n  static propTypes = {\n    children: PropTypes.instanceOf(Object),\n    title: PropTypes.string.isRequired,\n    isOpen: PropTypes.bool.isRequired,\n    id: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: this.props.isOpen,\n    };\n  }\n\n  // toggleOpen() {\n  //   console.log('toggling')\n  //   this.setState(prevState => ({\n  //     isOpen: !prevState.isOpen\n  //   }));\n  // }\n\n  render() {\n    return (\n      <div className='Section' id={this.props.id}>\n        <h1 onClick={() => this.props.onClick(this.props.title)}>{ this.props.title }</h1>\n        { this.props.children }\n      </div>\n    );\n  }\n}\n\nexport default Section;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Section from './Section';\nimport {Collapse} from 'react-collapse';\n\nclass SectionList extends Component {\n  static propTypes = {\n    children: PropTypes.instanceOf(Object).isRequired,\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.props.children.forEach(child => {\n      if (child.props.isOpen) {\n        this.state = {openSection: child};\n      }\n    });\n    console.log(this.state.openSection)\n  }\n\n  closeSection = section => {\n    console.log('closing ' + section.props.title)\n  }\n\n  expandSection = section => {\n    console.log('opening ' + section.props.title)\n  }\n\n  toggle = title => {\n    if (this.state.openSection === null) { // no sections are currently open, just open this one\n      this.props.children.forEach(child => {\n        if(child.props.title === title) {\n          this.expandSection(child);\n          this.setState({ openSection:child });\n        }\n      });\n    }\n    else if (title === this.state.openSection.props.title) { // closing the open section only\n      this.closeSection(this.state.openSection);\n      this.setState({ openSection:null });\n    }\n    else { // opening a new section and closing the old one\n      this.closeSection(this.state.openSection);\n      this.props.children.forEach(child => {\n        if(child.props.title === title) {\n          this.expandSection(child);\n          this.setState({ openSection:child });\n        }\n      });\n    }\n  }\n\n  render() {\n    return (\n      this.props.children.map(child => (\n        <Section\n          isOpen={child === this.state.openSection ? true : false}\n          title={child.props.title}\n          onClick={this.toggle}\n          id={child.props.id}\n        >\n          <Collapse isOpened={child === this.state.openSection ? true : false}>\n            { child.props.children }\n          </Collapse>\n        </Section>\n      ))\n    );\n  }\n}\n\nexport default SectionList;\n","import React, { Component } from 'react';\nimport './App.css';\nimport SectionList from './SectionList';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <SectionList>\n          <div title='Moses Berra' isOpen={true} id='main'>\n            <p>I like to code</p>\n          </div>\n          <div title='Avocados' isOpen={false} id='avocados'>\n            <p>I like to eat them</p>\n          </div>\n          <div title='The Website' isOpen={false} id='this'>\n            <p>\n              I built this site using <a href='https://reactjs.org/'>React</a>.\n              This is my first project using the React framework, and I used a&nbsp;\n              <a href='https://github.com/gitname/react-gh-pages'>lot</a>&nbsp;\n              <a href='https://alligator.io/react/react-accordion-component/'>of</a>&nbsp;\n              <a href='https://www.npmjs.com/package/react-collapse'>great</a>&nbsp;\n              <a href='https://medium.com/in-the-weeds/learning-react-with-create-react-app-part-2-3ad99f38b48d'>resources</a>.\n            </p>\n          </div>\n          <div title='Contact' isOpen={false} id='contact'>\n            <p>@me next time<br/>moses.r.berra@gmail.com</p>\n          </div>\n        </SectionList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}